// Import generated types from the build system
import type {
  CloudEvent as BaseCloudEvent,
  Issue as BaseIssue,
  Task as BaseTask,
  Comment as BaseComment,
  Planning as BasePlanning,
  PlanningMoment as BasePlanningMoment,
  JSONCommit as BaseJSONCommit,
  ItemType as BaseItemType,
  IssueStatus as BaseIssueStatus,
  PlanningStatus as BasePlanningStatus,
  Document as BaseDocument,
} from "./types/interfaces";

// Re-export base types
export type CloudEvent = BaseCloudEvent;
export type Issue = BaseIssue;
export type Task = BaseTask;
export type Comment = BaseComment;
export type Planning = BasePlanning;
export type PlanningMoment = BasePlanningMoment;
export type JSONCommit = BaseJSONCommit;
export type ItemType = BaseItemType;
export type IssueStatus = BaseIssueStatus;
export type PlanningStatus = BasePlanningStatus;
export type Document = BaseDocument;

// Extended interfaces for frontend-specific functionality
export interface ExtendedIssue extends BaseIssue {
  /** Generated by front-end, when replaying events */
  lastActivity?: string;
}

export interface ExtendedTask extends BaseTask {
  timestamp: string;
}

export interface ExtendedPlanning extends BasePlanning {
  actor: string;
  timestamp: string;
}

export interface IssueFormData {
  title: string;
  description: string;
  assignee: string;
}

export interface PatchFormData {
  issueId: string;
  title: string;
  status: string;
  assignee: string;
  description: string;
}

export interface IssueCreateData {
  id: string;
  title: string;
  description?: string;
  status: string;
  assignee?: string;
  created_at: string;
}

export interface IssuePatchData {
  [key: string]: unknown;
}

export interface IssueDeleteData {
  id: string;
  reason: string;
}

export type EventType = "json.commit" | "system.reset";

// Generic entity interface that all entities should extend
export interface BaseEntity extends Record<string, unknown> {
  id: string;
  created_at?: string;
  updated_at?: string;
}

// Example: Message entity
export interface Message extends BaseEntity {
  content: string;
  author?: string;
  channel?: string;
  thread_id?: string;
  reactions?: Record<string, number>;
}

// Document entity (using generated schema from Rust)
// The Document type is now imported from interfaces.ts

// Planning entity
export interface PlanningEntity extends BaseEntity {
  title: string;
  description?: string;
  moments: BasePlanningMoment[];
}

// Generic CloudEvent data types
export type CreateCloudEventData<T extends BaseEntity> = T;

export type PatchCloudEventData = Record<string, unknown>;

export interface DeleteCloudEventData {
  id: string;
  reason: string;
}

// Entity type mapping for type safety
export type EntityTypeMap = {
  issue: ExtendedIssue;
  message: Message;
  document: Document;
  planning: ExtendedPlanning;
  task: ExtendedTask;
  comment: Comment;
};

export type EntityType = keyof EntityTypeMap;

// Timeline types
export interface TimelineEvent {
  id: string;
  type: "created" | "updated" | "deleted";
  timestamp: string;
  actor?: string;
  data: unknown;
  originalEvent: CloudEvent;
}

export interface TimelineItemData {
  // For comments
  content?: string;
  parent_id?: string | null;
  mentions?: string[];
  edited_at?: string;

  // For status changes
  field?: string;
  old_value?: unknown;
  new_value?: unknown;
  reason?: string;

  // For LLM analysis
  prompt?: string;
  response?: string;
  model?: string;
  confidence?: number;

  // For deployments
  version?: string;
  environment?: string;
  commit_hash?: string;

  // For tasks
  cta?: string;
  description?: string;
  url?: string;
  completed?: boolean;
  deadline?: string;

  // For planning
  moments?: BasePlanningMoment[];

  // Generic fields
  [key: string]: unknown;
}

export type TimelineItemType =
  | "comment"
  | "status_change"
  | "field_update"
  | "system_update"
  | "llm_analysis"
  | "deployment"
  | "system_event"
  | "issue_created"
  | "issue_updated"
  | "issue_deleted"
  | "task"
  | "planning"
  | "document";
